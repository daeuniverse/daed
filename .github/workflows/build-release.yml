name: build & release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "**/*.ts"
      - "**/*.js"
      - "**/*.html"
      - "**/*.css"
      - "**/*.tsx"
      - "*.tsx"
      - "*.ts"
      - "package.json"
      - "package-lock.json"
      - ".npmrc"
      - ".pnpm-lock.yaml"
      - "tsconfig.json"
      - "vite.config.ts"
      - ".github/workflows/build.yml"
      - "Makefile"
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/*.ts"
      - "**/*.js"
      - "**/*.html"
      - "**/*.css"
      - "**/*.tsx"
      - "*.tsx"
      - "*.ts"
      - "package.json"
      - "package-lock.json"
      - ".npmrc"
      - ".pnpm-lock.yaml"
      - "tsconfig.json"
      - "vite.config.ts"
      - ".github/workflows/build.yml"
      - "Makefile"
  release:
    types: [ prereleased ]

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - uses: actions/setup-node@v3
        with:
          cache: pnpm
          node-version: latest

      - name: build
        run: |
          pnpm install
          pnpm build

      - name: upload artifact - web
        uses: actions/upload-artifact@v3
        with:
          name: web
          path: dist

  build-bundle:
    needs: build-web
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux]
        goarch: [arm64, 386, riscv64, mips64, mips64le, mipsle, mips]

        include:
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
            cgo_enabled: 0
          - goos: linux
            goarch: arm
            goarm: 6
            cgo_enabled: 0
          - goos: linux
            goarch: arm
            goarm: 5
            cgo_enabled: 0
          # END Linux ARM 5 6 7
          # BEGIN Linux AMD64 v1 v2 v3
          - goos: linux
            goarch: amd64
            goamd64: v1
            cgo_enabled: 0
          - goos: linux
            goarch: amd64
            goamd64: v2
            cgo_enabled: 0
          - goos: linux
            goarch: amd64
            goamd64: v3
            cgo_enabled: 0
          # END Linux AMD64 v1 v2 v3
          # BEGIN Linux mips
          - goos: linux
            goarch: mips64
            cgo_enabled: 1
            cc: mips64-linux-gnuabi64-gcc
          - goos: linux
            goarch: mips64le
            cgo_enabled: 1
            cc: mips64el-linux-gnuabi64-gcc
          - goos: linux
            goarch: mipsle
            cgo_enabled: 1
            cc: mipsel-linux-gnu-gcc
          - goos: linux
            goarch: mips
            cgo_enabled: 1
            cc: mips-linux-gnu-gcc
          # END Linux mips
          - goos: linux
            goarch: riscv64
            cgo_enabled: 0
      fail-fast: false

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: ${{ matrix.cgo_enabled }}
      CC: ${{ matrix.cc }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          repository: daeuniverse/dae-wing
          path: dae-wing
          ref: 'd986b18e10a7bfb90da1c15094b97e9386c459ef'

      - name: get filename
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOAMD64\"].friendlyName" -r < install/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_OUTPUT

      - name: install build dependencies
        if: ${{ startsWith(matrix.goarch, 'mips') }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-mips64-linux-gnuabi64 gcc-mips64el-linux-gnuabi64 gcc-mips-linux-gnu gcc-mipsel-linux-gnu

      - name: build
        run: |
          cd dae-wing
          make deps
          go build .

      - name: download artifact - web
        uses: actions/download-artifact@v3
        with:
          name: web
          path: dist/

      - name: bundle
        run: |
          cd dae-wing
          make WEB_DIST=../dist bundle
          mv dae-wing daed-${{ steps.get_filename.outputs.ASSET_NAME }}

      - name: upload artifact - bundled
        uses: actions/upload-artifact@v3
        with:
          name: daed-${{ steps.get_filename.outputs.ASSET_NAME }}
          path: dae-wing/daed-${{ steps.get_filename.outputs.ASSET_NAME }}

  release:
    runs-on: ubuntu-latest
    needs: build-bundle
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: download artifact - web
        uses: actions/download-artifact@v3
        with:
          name: web
          path: dist/

      - name: publish github pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

      - name: docker image - quay.io
        uses: aevea/action-kaniko@master
        with:
          registry: quay.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.QUAY_PASS }}
          image: ${{ github.repository }}
          build_file: Dockerfile
          tag_with_latest: true
          cache: true
          cache_registry: quay.io/${{ github.repository_owner }}/cache
