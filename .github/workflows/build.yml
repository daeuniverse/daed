name: Build

on:
  push:
    branches:
      - main
      - develop
  release:
    types: [prereleased]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  full-src:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Download wing vendor
        run: go mod vendor
        working-directory: wing

      - name: Create full source ZIP archive and Signature
        run: |
          zip -9vr daed-full-src.zip . -x .git/\*
          FILE=./daed-full-src.zip
          DGST=$FILE.dgst
          md5sum        $FILE >>$DGST
          shasum -a 1   $FILE >>$DGST
          shasum -a 256 $FILE >>$DGST
          shasum -a 512 $FILE >>$DGST

      - name: Upload artifact - full source
        uses: actions/upload-artifact@v3
        with:
          name: daed-full-src
          path: daed-full-src.zip

  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - uses: actions/setup-node@v3
        with:
          cache: pnpm
          node-version: latest

      - name: Build
        run: |
          pnpm install
          pnpm build

      - name: Upload artifact - web
        uses: actions/upload-artifact@v3
        with:
          name: web
          path: dist

  build-bundle:
    needs: build-web
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux]
        goarch: [arm64, 386, riscv64, mips64, mips64le, mipsle, mips]

        include:
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7

          # BEGIN Linux AMD64 v1 v2 v3
          - goos: linux
            goarch: amd64
            goamd64: v1
          - goos: linux
            goarch: amd64
            goamd64: v2
          - goos: linux
            goarch: amd64
            goamd64: v3
          # END Linux AMD64 v1 v2 v3

          # BEGIN Linux mips
          - goos: linux
            goarch: mips64
            cgo_enabled: 1
            cc: mips64-linux-gnuabi64-gcc
          - goos: linux
            goarch: mips64le
            cgo_enabled: 1
            cc: mips64el-linux-gnuabi64-gcc
          - goos: linux
            goarch: mipsle
            cgo_enabled: 1
            cc: mipsel-linux-gnu-gcc
          - goos: linux
            goarch: mips
            cgo_enabled: 1
            cc: mips-linux-gnu-gcc
          # END Linux mips
      fail-fast: false

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: ${{ matrix.cgo_enabled || 0 }}
      CC: ${{ matrix.cc }}

    steps:
      - uses: actions/checkout@v3

      - name: Get the version
        id: get_version
        env:
          REF: ${{ github.ref }}
        run: |
          if [[ "$REF" == "refs/tags/v"* ]]; then
            tag=$(git describe --tags $(git rev-list --tags --max-count=1))
            version=${tag}
            package_version="$(echo $tag | sed 's|v||g')"
          else
            date=$(git log -1 --format="%cd" --date=short | sed s/-//g)
            count=$(git rev-list --count HEAD)
            commit=$(git rev-parse --short HEAD)
            version="unstable-$date.r${count}.$commit"
            package_version="$date.r${count}.$commit"
          fi
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Get the filename
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOAMD64\"].friendlyName" -r < install/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, RELEASE_NAME: $_NAME"
          echo "BUNDLE_NAME=daed-$_NAME" >> $GITHUB_OUTPUT

      - name: Install mips build dependencies
        if: ${{ startsWith(matrix.goarch, 'mips') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mips64-linux-gnuabi64 gcc-mips64el-linux-gnuabi64 gcc-mips-linux-gnu gcc-mipsel-linux-gnu

      - name: Download artifact - web
        uses: actions/download-artifact@v3
        with:
          name: web
          path: dist/

      - name: make
        run: |
          mkdir -p ./bundled/
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          export GOFLAGS="-trimpath -modcacherw"
          export OUTPUT=bundled/${{ steps.get_filename.outputs.BUNDLE_NAME }}
          make
          cp ./install/daed.service ./bundled/
          curl -L -o ./bundled/geoip.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geoip.dat
          curl -L -o ./bundled/geosite.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geosite.dat

      - name: Smoking test
        if: matrix.goarch == 'amd64' && matrix.goamd64 == 'v1'
        run: ./bundled/${{ steps.get_filename.outputs.BUNDLE_NAME }} --version

      - name: Create binary ZIP archive and Signature
        run: |
          pushd bundled || exit 1
          zip -9vr ../${{ steps.get_filename.outputs.BUNDLE_NAME }}.zip .
          popd || exit 1
          FILE=./${{ steps.get_filename.outputs.BUNDLE_NAME }}.zip
          DGST=$FILE.dgst
          md5sum        $FILE >>$DGST
          shasum -a 1   $FILE >>$DGST
          shasum -a 256 $FILE >>$DGST
          shasum -a 512 $FILE >>$DGST

      - name: Upload artifact - bundle
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get_filename.outputs.BUNDLE_NAME }}
          path: bundled/*

      - name: Build Linux packages
        if: ${{ env.GOARM != '5' && env.GOARM != '6' }}
        run: |
          if [ "$GOARM" != '5' ] && [ "$GOARM" != '6' ];then
            sudo apt install -y libarchive-tools rpm
            sudo gem install fpm -v 1.15.1
            pushd bundled || exit 1
            for package_manager in deb rpm pacman; do
              fpm -s dir -t "$package_manager" -a $GOARCH --version "$PACKAGE_VERSION" \
                --url 'https://github.com/daeuniverse/daed' --description "daed, A Modern Dashboard For dae." \
                --maintainer "daed@dae.v2raya.org" --name daed --license 'MIT AGPL' \
                --package daed-linux-$GOARCH$GOAMD64$GOARM.$package_manager \
                ./geoip.dat=/usr/share/daed/geoip.dat ./geosite.dat=/usr/share/daed/geosite.dat \
                ./daed.service=/usr/lib/systemd/system/daed.service \
                ./${{ steps.get_filename.outputs.BUNDLE_NAME }}=/usr/bin/daed
            done
            popd || exit 1
            cp bundled/daed-linux-$GOARCH$GOAMD64$GOARM.deb installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb
            cp bundled/daed-linux-$GOARCH$GOAMD64$GOARM.rpm installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm
            cp bundled/daed-linux-$GOARCH$GOAMD64$GOARM.pacman installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.pkg.tar.zst
            ls | grep -E ".deb|.pkg.tar.zst|.rpm"
            for package in $(ls | grep -E ".deb|.pkg.tar.zst|.rpm");do
                md5sum        $package >> $package.dgst
                shasum -a 1   $package >> $package.dgst
                shasum -a 256 $package >> $package.dgst
                shasum -a 512 $package >> $package.dgst
                cat $package.dgst
            done
          fi

      - name: Upload artifact - packages
        if: ${{ github.event_name != 'release' && env.GOARM != '5' && env.GOARM != '6' }}
        uses: nanoufo/action-upload-artifacts-and-release-assets@v1.5
        with:
          path: |
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.pkg.tar.zst
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb.dgst
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm.dgst
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.pkg.tar.zst.dgst

      - name: Upload Linux packages to GitHub release
        if: ${{ github.event_name == 'release' && env.GOARM != '5' && env.GOARM != '6' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.pkg.tar.zst
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb.dgst
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm.dgst
            installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.pkg.tar.zst.dgst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact - bundle-all
        uses: actions/upload-artifact@v3
        with:
          name: bundled-all
          path: ${{ steps.get_filename.outputs.BUNDLE_NAME }}.zip

  upload-release:
    if: github.event_name == 'release'
    needs: [full-src, build-bundle]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: daed-full-src
          path: release/

      - uses: actions/download-artifact@v3
        with:
          name: bundled-all
          path: release/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          files: |
            release/*
          generate_release_notes: true

  upload-prerelease:
    if: ${{ github.ref_type == 'branch' }}
    needs: [full-src, build-bundle]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: daed-full-src
          path: release/

      - uses: actions/download-artifact@v3
        with:
          name: bundled-all
          path: release/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release

      - name: Delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Prerelease
          deleteOnlyFromDrafts: false

      - name: Upload Prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Prerelease
          files: |
            release/*
          prerelease: true
          generate_release_notes: true
